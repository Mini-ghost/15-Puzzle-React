{"version":3,"sources":["action/index.js","components/PuzzleItem.js","components/Completed.js","components/PuzzleCover.js","App.js","reducer/index.js","index.js"],"names":["INIT_PUZZLE","num","type","SET_COMPLETE","complete","Item","styled","div","ItemContent","PuzzleItem","handleClick","position","props","item","emptyArray","index","col","Math","abs","row","moveEmpty","updateMove","this","number","styleObject","top","left","style","onClick","Component","connect","state","dispatch","MOVE_EMPTY","Content","Title","h2","Depiction","p","Completed","Cover","Button","button","PuzzleCover","playToggle","h1","Moves","Puzzle","PuzzleContent","PuzzleGroup","Reset","ResetItem","App","startPuzzle","initPuzzle","togglePlay","prevProps","puzzle","play","every","join","value","setComplete","setTimeout","move","map","key","initMultiArrays","floor","checkResolvable","ary","space","findIndex","spaceX","newAry","splice","countComputed","count","forEach","_ary","length","_index","emptyIndex","sum","push","resolvable","sort","random","id","emptyPosition","UPDATE_MOVE","action","TOGGLE_PLAY","storeState","puzzleStore","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed9f3126.chunk.js","sourcesContent":["/** 初始化遊戲 */\r\nconst INIT_PUZZLE = num => {\r\n  return {\r\n    type: 'INIT_PUZZLE',\r\n    num\r\n  }\r\n}\r\n\r\n/** 滑動物件 */\r\nconst MOVE_EMPTY = index => {\r\n  return {\r\n    type: 'MOVE_EMPTY',\r\n    index\r\n  }\r\n}\r\n\r\nconst UPDATE_MOVE = () => {\r\n  return {\r\n    type: 'UPDATE_MOVE'\r\n  }\r\n}\r\n\r\nconst TOGGLE_PLAY = () => {\r\n  return {\r\n    type: 'TOGGLE_PLAY'\r\n  }\r\n}\r\n\r\nconst SET_COMPLETE = complete => {\r\n  return {\r\n    type: 'SET_COMPLETE',\r\n    complete\r\n  }\r\n}\r\n\r\nexport {\r\n  INIT_PUZZLE,\r\n  MOVE_EMPTY,\r\n  UPDATE_MOVE,\r\n  TOGGLE_PLAY,\r\n  SET_COMPLETE\r\n}","import React, { Component } from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { MOVE_EMPTY, UPDATE_MOVE } from '../action'\r\n\r\nconst Item = styled.div`\r\n\twidth: 25%;\r\n\theight: 25%;\r\n\tpadding: 10px;\r\n\tposition: absolute;\r\n\ttransition: .5s;\r\n`\r\n\r\nconst ItemContent = styled.div`\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tcolor: #efefef;\r\n\tbackground-color: #313747;\r\n\tcolor: white;\r\n\tborder-radius: 12px;\r\n\tfont-size: 36px;\r\n\tcursor: pointer;\r\n\ttransition: 0.5s;\r\n\t&:hover {\r\n\t\tbackground-color: #252a37\r\n\t}\r\n`\r\n\r\nconst mapStateToProps = state => {\r\n\tconst { emptyArray, complete } = state\r\n\treturn { emptyArray, complete }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tmoveEmpty: index => {\r\n\t\t\tdispatch(MOVE_EMPTY(index))\r\n\t\t},\r\n\t\tupdateMove: () => {\r\n\t\t\tdispatch(UPDATE_MOVE())\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass PuzzleItem extends Component {\r\n\r\n\thandleClick = () => {\r\n\t\tconst { position } = this.props.item\r\n\t\tconst { emptyArray, index, complete } = this.props\r\n    /** 差幾列 */\r\n    const col = Math.abs(emptyArray[0] - position[0]);\r\n    /** 差幾行 */\r\n\t\tconst row = Math.abs(emptyArray[1] - position[1]);\r\n    /** 判斷該物件是否相鄰 */\r\n\t\tconst isNeighbor = col + row === 1;\r\n\t\tif (!complete && isNeighbor) {\r\n\t\t\t/** 改變點選物件座標 */\r\n\t\t\tthis.props.moveEmpty(index)\r\n\t\t\t/** 更新計步器 */\r\n\t\t\tthis.props.updateMove()\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { number, position } = this.props.item\r\n\t\t/** 物件 style */\r\n\t\tconst styleObject = {\r\n\t\t\ttop: `${position[1] * 120}px`,\r\n\t\t\tleft: `${position[0] * 120}px`\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t<Item style={ styleObject }>\r\n\t\t\t\t<ItemContent onClick={ this.handleClick }>\r\n\t\t\t\t\t{ number }\r\n\t\t\t\t</ItemContent>\r\n\t\t\t</Item>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PuzzleItem)","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Content = styled.div`\r\n  margin: 2rem 0\r\n`\r\nconst Title = styled.h2`\r\n  font-size: 36px;\r\n  color: #ffe564;\r\n`\r\n\r\nconst Depiction = styled.p`\r\nfont-size: 18px;\r\ncolor: rgb(255, 229, 100);\r\nletter-spacing: 1.5px\r\n`\r\n\r\nexport default function Completed() {\r\n  return (\r\n    <Content>\r\n      <Title>Congratulations </Title>\r\n      <Depiction>\r\n        You have successfully completed this \r\n        <strong> 15 puzzle </strong>\r\n      </Depiction>\r\n    </Content>\r\n  );\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport Completed from './Completed'\r\n\r\nconst Cover = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  flex-direction: column;\r\n  background-color: rgba(37, 38, 39, 0.5);\r\n  border-radius: 16px;\r\n  font-weight: bold;\r\n  z-index: 9\r\n`\r\nconst Button = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  color: inherit;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  color: #61dafb;\r\n  font-size: 72px;\r\n`\r\n\r\nexport default function PuzzleCover({ complete, playToggle }) {\r\n  return (\r\n    <Cover>\r\n      { complete && <Completed /> }\r\n      <Button onClick={ () => playToggle() }>Play</Button>\r\n    </Cover>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nimport { connect } from 'react-redux'\nimport { INIT_PUZZLE, TOGGLE_PLAY, SET_COMPLETE } from './action'\n\n// components\nimport PuzzleItem from './components/PuzzleItem'\nimport PuzzleCover from './components/PuzzleCover'\n\nconst sec = 5\n/** 外層容器 */\nconst Content = styled.div`\n  font-family: \"Shadows Into Light\", \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #61dafb;\n  margin-top: 60px;\n  user-select: none;\n\n`\nconst Title = styled.h1`\n  font-size: 40px;\n`\nconst Moves = styled.p`\n  font-weight: bold;\n  font-size: 24px;\n\n`\nconst Puzzle = styled.div`\n  position: relative;\n  width: 500px;\n  height: 500px;\n  margin-top: 2.5vw;\n  margin-right: auto;\n  margin-left: auto;\n  box-shadow: 0 0 10px rgba(0, 0 ,0 , .35);\n  border-radius: 16px;\n  overflow: hidden;\n  transition: ${sec}s;\n  background-color: #1f2229;\n`\n\nconst PuzzleContent = styled.div`\n  padding: 5px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PuzzleGroup = styled.div`\n  position: relative;\n  width: calc(100% - 10px);\n  height: calc(100% - 10px);\n  display: flex;\n  flex-wrap: wrap;\n  font-size: 2.125rem;\n`\nconst Reset = styled.div` \n`\n\nconst ResetItem = styled.div`\n  position: relative;\n  color: #61dafb;\n  font-size: 36px;\n  font-weight: bold;\n  cursor: pointer\n`\n\nconst mapStateToProps = state => state\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initPuzzle: (num = 4) => {\n      dispatch(SET_COMPLETE(false))\n      dispatch(INIT_PUZZLE(num))\n    },\n    togglePlay: () => {\n      dispatch(TOGGLE_PLAY())\n    },\n    setComplete: (type) => {\n      dispatch(SET_COMPLETE(type))\n    }\n  }\n}\n\nclass App extends Component {\n\n  startPuzzle = () => {\n    this.props.initPuzzle();\n    this.props.togglePlay()\n  }\n\n  componentDidUpdate(prevProps) {\n    const { puzzle, play } = this.props\n    const complete = puzzle.every(item => item.position.join('') === item.value.join(''))\n    if (complete && play) {\n      this.props.setComplete(complete)\n      setTimeout(() => {\n        this.props.togglePlay()\n      }, 1000);\n    }\n  }\n\n  render() {\n    const { puzzle, complete, move, play } = this.props\n    return (\n      <Content>\n        <Title> 15 puzzle </Title>\n        <Moves> MOVE{ move > 1 && 'S' }：{ move }</Moves>\n        <Puzzle>\n          <PuzzleContent>\n            {\n              !play && <PuzzleCover playToggle={ this.startPuzzle } complete={ complete }/>\n            }\n            <PuzzleGroup>\n              {\n                puzzle.map((item, index) => (\n                  <PuzzleItem item={item} index={index} key={item.number}/>\n                ))\n              }\n            </PuzzleGroup>\n          </PuzzleContent>\n        </Puzzle>\n        {\n          play && <Reset>\n            <ResetItem onClick={() => this.props.initPuzzle()}>reset</ResetItem>\n          </Reset>\n        }\n      </Content>\n    )\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","const initPuzzle = num => {\r\n  const sum = num * num\r\n  const puzzle = []\r\n  for (let number = 1; number <= sum; number++) {\r\n    const value = initMultiArrays(number - 1)\r\n    puzzle.push({ number, value, position: [0, 0]})\r\n  }\r\n  return puzzle\r\n}\r\n /** 數字轉座標 */\r\nconst initMultiArrays = num => {\r\n  return [ num % 4, Math.floor(num / 4) ]\r\n}\r\n/** 比對資料是否有解答 */\r\nconst checkResolvable = ary=> {\r\n  /** 16 的序號 */\r\n  const space = ary.findIndex(item => item.number === 16)\r\n  /** 16 的列（X軸位置） */\r\n  const spaceX = initMultiArrays(space)[0] % 2\r\n  /** 逆序列數 */\r\n  let count = 0\r\n  // splice 會動到原本的陣列，所以這裡解構出一個陣列來操作\r\n  let newAry = [...ary]\r\n  newAry.splice(space, 1)\r\n  count = countComputed(newAry)\r\n  return count % 2 + spaceX % 2 === 0\r\n}\r\n/** 逆序列累加 */\r\nconst countComputed = ary => {\r\n  let count = 0\r\n  ary.forEach((item, index, _ary) => {\r\n    const length = ary.length\r\n    let _index = index + 1\r\n    while (_index < length) {\r\n      // item.number 後面的數字只要有比我小的就加 1\r\n      if (item.number > _ary[_index].number) count++\r\n      _index++\r\n    }\r\n  })\r\n  return count\r\n}\r\n\r\n/** 初始化 puzzle 資料 */\r\nconst INIT_PUZZLE = (state, { num }) => {\r\n  const puzzle = initPuzzle(num)\r\n  let emptyIndex = 0\r\n  let emptyArray = [0, 0]\r\n  let resolvable = false\r\n  while (!resolvable) {\r\n    /** 打亂初始化的 puzzle 資料 */\r\n    puzzle.sort(() => (Math.random() > 0.5 ? 1 : -1))\r\n    resolvable = checkResolvable(puzzle)\r\n  }\r\n  /** 設定空格資料 */\r\n  emptyIndex = puzzle.findIndex(item => item.number === 16)\r\n  emptyArray = initMultiArrays(emptyIndex)\r\n  /** 排組亂數後賦予定位 */\r\n  puzzle.splice(emptyIndex, 1)\r\n  puzzle.forEach((item, index) => {\r\n    let id = index < emptyIndex ? index : index + 1\r\n    item.position = initMultiArrays(id)\r\n  })\r\n\r\n  return { ...state, puzzle, emptyArray }\r\n}\r\n/** 滑塊移動，改變現有 state */\r\nconst MOVE_EMPTY = (state, { index }) => {\r\n  let { puzzle, emptyArray } = state\r\n  const { position } = puzzle[index]\r\n  const emptyPosition = [...emptyArray]\r\n  emptyArray = [...position]\r\n  puzzle = puzzle.map((item, id) => {\r\n    if (id === index) return {...item,position: emptyPosition}\r\n    return item\r\n  })\r\n  return { ...state, puzzle, emptyArray }\r\n}\r\n\r\n/** 更新計步器 */\r\nconst UPDATE_MOVE = (state, action) => {\r\n  let { move } = state\r\n  move += 1\r\n  return { ...state, move }\r\n}\r\n\r\n/** 遊戲狀態切換 */\r\nconst TOGGLE_PLAY = (state, action) => {\r\n  const { play } = state\r\n  return { ...state, play: !play }\r\n}\r\n\r\nconst SET_COMPLETE = (state, { complete }) => {\r\n  return { ...state, complete }\r\n}\r\n\r\nconst storeState = {\r\n  puzzle: [],\r\n  emptyArray: [],\r\n  move: 0,\r\n  complete: false,\r\n  play: false\r\n}\r\n\r\nconst puzzleStore = (state = storeState, action) => {\r\n  switch (action.type) {\r\n    case 'INIT_PUZZLE':\r\n      return INIT_PUZZLE(state, action)\r\n    case 'MOVE_EMPTY':\r\n      return MOVE_EMPTY(state, action)\r\n    case 'UPDATE_MOVE':\r\n      return UPDATE_MOVE(state, action) \r\n    case 'TOGGLE_PLAY':\r\n      return TOGGLE_PLAY(state, action)\r\n    case 'SET_COMPLETE':\r\n      return SET_COMPLETE(state, action)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default puzzleStore","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { Provider } from 'react-redux'\n\nimport puzzleStore from './reducer'\nimport { createStore } from \"redux\";\n\nconst store = createStore(\n  puzzleStore,\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\n  window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}